// src/cpp/position/risk_manager.h

#pragma once

#include <string>
#include <memory>

// Forward-declare TradingSignalEvent from the core namespace.
namespace nexus::core {
    struct TradingSignalEvent;
}

// All definitions for this module belong in the position namespace.
namespace nexus::position {

// Forward-declare PositionManager, which is in the same namespace.
class PositionManager;

/**
 * @class RiskManager
 * @brief Provides pre-trade compliance checks to validate trading signals.
 *
 * This class acts as a gatekeeper for trading signals. Before a signal is
 * sent for execution, the RiskManager analyzes it against the current state
 * of the portfolio (via the PositionManager) to ensure it complies with a
 * set of predefined risk rules, such as maximum position size or total
 * portfolio drawdown limits.
 */
class RiskManager {
public:
    /**
     * @brief Constructs the RiskManager.
     * @param position_manager A const reference to the portfolio's position
     * manager, used to access current state for risk calculations.
     */
    explicit RiskManager(const PositionManager& position_manager);

    /**
     * @brief Default destructor.
     */
    ~RiskManager() = default;

    /**
     * @brief Validates a proposed trading signal against all risk rules.
     * @param signal The trading signal generated by the strategy.
     * @param current_market_price The last known market price for the asset.
     * @return True if the signal is approved, false if it is rejected.
     */
    bool validate_order(
        const nexus::core::TradingSignalEvent& signal,
        double current_market_price
    ) const;

private:
    const PositionManager& position_manager_;
    double max_position_exposure_{0.20};
    double max_portfolio_drawdown_{0.15};
};

} // namespace nexus::position