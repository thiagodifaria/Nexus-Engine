name: CI - Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Job 1: Build and test C++ engine
  cpp-engine:
    name: Build C++ Engine
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libsqlite3-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake sqlite3

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake

      - name: Configure CMake
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_STANDARD=20

      - name: Build C++ Engine
        run: cmake --build build --config ${{ matrix.build_type }} --parallel 4

      - name: Run C++ Tests
        working-directory: build
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

  # Job 2: Build Python backend with bindings
  python-backend:
    name: Build Python Backend
    needs: cpp-engine
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libsqlite3-dev libpq-dev

      - name: Install Python dependencies
        working-directory: backend/python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .[dev]

      - name: Lint with ruff
        working-directory: backend/python
        run: |
          ruff check src/

      - name: Type check with mypy
        working-directory: backend/python
        continue-on-error: true
        run: |
          mypy src/

      - name: Run Python unit tests
        working-directory: backend/python
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/python/coverage.xml
          flags: python-backend
          name: python-${{ matrix.python-version }}-${{ matrix.os }}

  # Job 3: Test PyQt6 Frontend
  pyqt-frontend:
    name: Test PyQt6 Frontend
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libdbus-1-3 \
            libegl1 libfontconfig1 libglib2.0-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0

      - name: Install frontend dependencies
        working-directory: frontend/pyqt6
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run frontend tests
        working-directory: frontend/pyqt6
        run: |
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/pyqt6/coverage.xml
          flags: pyqt-frontend
          name: frontend-${{ matrix.python-version }}-${{ matrix.os }}

  # Job 4: Integration tests
  integration-tests:
    name: Integration Tests
    needs: [python-backend, pyqt-frontend]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: nexus_test
          POSTGRES_USER: nexus
          POSTGRES_PASSWORD: nexus_test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libsqlite3-dev libpq-dev
          python -m pip install --upgrade pip
          pip install -r backend/python/requirements.txt
          pip install -e backend/python[dev]

      - name: Run integration tests
        working-directory: backend/python
        env:
          DATABASE_URL: postgresql://nexus:nexus_test_pass@localhost:5432/nexus_test
        run: |
          pytest tests/integration/ -v --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/python/coverage.xml
          flags: integration
          name: integration-tests

  # Job 5: Build Docker images
  docker-build:
    name: Build Docker Images
    needs: [python-backend, pyqt-frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Python backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./devops/docker/Dockerfile.python
          push: false
          tags: nexus-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose stack
        run: |
          docker-compose -f devops/docker/docker-compose.yml up -d
          sleep 30
          docker-compose -f devops/docker/docker-compose.yml ps
          docker-compose -f devops/docker/docker-compose.yml logs
          docker-compose -f devops/docker/docker-compose.yml down

  # Job 6: Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check
        working-directory: backend/python
        run: |
          safety check --file=requirements.txt

      - name: Run bandit security scan
        working-directory: backend/python
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f screen

      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: backend/python/bandit-report.json